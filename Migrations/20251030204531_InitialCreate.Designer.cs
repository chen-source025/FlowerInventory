// <auto-generated />
using System;
using FlowerInventory.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FlowerInventory.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251030204531_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FlowerInventory.Models.Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BatchNo")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FlowerId")
                        .HasColumnType("integer");

                    b.Property<string>("InspectionNote")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("QuantityPassed")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityReceived")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BatchNo")
                        .IsUnique();

                    b.HasIndex("ExpiryDate");

                    b.HasIndex("FlowerId");

                    b.HasIndex("ReceivedDate");

                    b.HasIndex("Status");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("FlowerInventory.Models.Flower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ABCClass")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("InspectionPassRate")
                        .HasColumnType("decimal(3,2)");

                    b.Property<int>("LeadTimeDays")
                        .HasColumnType("integer");

                    b.Property<int>("LeadTimeWeeks")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ReplenishCycleWeeks")
                        .HasColumnType("integer");

                    b.Property<decimal>("SeasonalFactor")
                        .HasColumnType("decimal(4,2)");

                    b.Property<int?>("ShelfLifeDays")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int>("SupplierDeliveriesPerWeek")
                        .HasColumnType("integer");

                    b.Property<string>("Variety")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ABCClass");

                    b.HasIndex("Category");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Flowers");
                });

            modelBuilder.Entity("FlowerInventory.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BatchId")
                        .HasColumnType("integer");

                    b.Property<int>("ChangeQty")
                        .HasColumnType("integer");

                    b.Property<int>("FlowerId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("TransactionDate");

                    b.HasIndex("TransactionType");

                    b.HasIndex("FlowerId", "TransactionDate");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FlowerInventory.Models.Batch", b =>
                {
                    b.HasOne("FlowerInventory.Models.Flower", "Flower")
                        .WithMany("Batches")
                        .HasForeignKey("FlowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flower");
                });

            modelBuilder.Entity("FlowerInventory.Models.Transaction", b =>
                {
                    b.HasOne("FlowerInventory.Models.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId");

                    b.HasOne("FlowerInventory.Models.Flower", "Flower")
                        .WithMany("Transactions")
                        .HasForeignKey("FlowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Flower");
                });

            modelBuilder.Entity("FlowerInventory.Models.Flower", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
